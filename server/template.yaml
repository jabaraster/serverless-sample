AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: An AWS Serverless Specification template describing your function.

Globals:
  Function:
    Runtime: nodejs10.x
    MemorySize: 128
    Timeout: 15
    Environment:
      Variables: 
        BUCKET_NAME: !Ref PhotoBucket
        TABLE_NAME : !Ref PhotoTable

Resources:
  PhotoBucket:
    Type: AWS::S3::Bucket
    Properties:
      WebsiteConfiguration:
        IndexDocument: index.html
      CorsConfiguration:
        CorsRules:
          -
            AllowedHeaders:
                - "*"
            AllowedMethods: 
                - "GET"
                - "PUT"
                - "POST"
                - "DELETE"
                - "HEAD"
            AllowedOrigins: 
                - "*"
            MaxAge: 3000
  PhotoBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref PhotoBucket
      PolicyDocument:
        Statement:
          -
            Action: s3:GetObject
            Effect: Allow
            Principal : "*"
            Resource:
              Fn::Join:
                - ""
                - 
                  - "arn:aws:s3:::"
                  - !Ref PhotoBucket
                  - "/*"

  PhotoTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: photoId
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      Schema:
      - Name: email
        StringAttributeConstraints:
          MinLength: 0
          MaxLength: 2048
        Required: true
        AttributeDataType: String
        Mutable: true
      AliasAttributes: [email]
      AutoVerifiedAttributes: [email]
      EmailVerificationSubject: Your verification code
      EmailVerificationMessage: Your app verification code is {####}.
      MfaConfiguration: "OFF"
      UserPoolName:
        Ref: AWS::StackName
      Policies:
        PasswordPolicy:
          RequireLowercase: false
          RequireSymbols: false
          RequireNumbers: false
          MinimumLength: 6
          RequireUppercase: false

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: photo-app
      GenerateSecret: false
      UserPoolId: !Ref UserPool

  optionsImages:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/src/
      Handler: options.lambdaHandler
      Description : ""
      Events:
        Api:
          Type: Api
          Properties:
            Path: /images
            Method: OPTIONS
  postImage:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/src/
      Handler: postImage.lambdaHandler
      Runtime: nodejs10.x
      Description : ""
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref PhotoBucket
        - DynamoDBCrudPolicy:
            TableName: !Ref PhotoTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /images
            Method: POST
  updateImages:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/src/
      Handler: updateImage.lambdaHandler
      Description : ""
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref PhotoTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /images
            Method: PUT
  getImages:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/src/
      Handler: getImages.lambdaHandler
      Description : ""
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref PhotoTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /images
            Method: GET
  optionsImageById:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/src/
      Handler: options.lambdaHandler
      Description : ""
      Events:
        Api:
          Type: Api
          Properties:
            Path: /image/{id}
            Method: OPTIONS
  getImageById:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/src/
      Handler: getImageById.lambdaHandler
      Description : ""
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref PhotoTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /image/{id}
            Method: GET
  deleteImageById:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/src/
      Handler: deleteImageById.lambdaHandler
      Description : ""
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref PhotoTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /image/{id}
            Method: DELETE
Outputs:
  UserPoolId:
    Value: !Ref UserPool
  UserPoolClientId:
    Value: !Ref UserPoolClient